// Generated by CoffeeScript 1.10.0
(function() {
  var Api, _, config, rp;

  _ = require('lodash');

  rp = require('request-promise');

  config = require('./config');

  Api = (function() {
    Api.REST_API_URL = "https://api.vk.com/method/";

    Api.OAUTH_URL = "https://oauth.vk.com/access_token";

    Api.prototype.accessToken = null;

    Api.config = function() {
      return config["default"]();
    };

    Api.canvasPageUrl = function(protocol) {
      var conf;
      conf = this.config();
      return protocol + "www.vk.com/app" + conf['appId'];
    };

    Api.callbackUrl = function(protocol) {
      var conf;
      conf = this.config();
      return protocol + conf['callbackDomain'];
    };

    Api.iframeRedirectHtmlCode = function(targetUrl, customCode) {
      return "<html><head>\n<script type=\"text/javascript\">\n  window.top.location.href = \"" + targetUrl + "\";\n</script>\n<noscript>\n  <meta http-equiv=\"refresh\" content=\"0;url=" + targetUrl + "\" />\n  <meta http-equiv=\"window-target\" content=\"_top\" />\n</noscript>\n" + customCode + "\n</head></html>";
    };

    Api.getAppAccessToken = function() {
      var conf, options;
      conf = this.config();
      options = {
        uri: Api.OAUTH_URL,
        qs: {
          client_id: conf['appId'],
          client_secret: conf['appSecret'],
          v: conf['apiVersion'],
          grant_type: 'client_credentials'
        },
        json: true
      };
      return rp(options);
    };

    function Api(accessToken) {
      this.accessToken = accessToken;
    }

    Api.prototype.config = function() {
      return this.constructor.config();
    };

    Api.prototype.call = function(method, specificParams, withAccessToken) {
      var options;
      if (specificParams == null) {
        specificParams = {};
      }
      if (withAccessToken == null) {
        withAccessToken = true;
      }
      options = {
        uri: Api.REST_API_URL + method,
        qs: this.signedCallParams(method, specificParams),
        json: true
      };
      if (!withAccessToken || (this.accessToken != null)) {
        return rp(options);
      } else {
        return Api.getAppAccessToken().then((function(_this) {
          return function(data) {
            _this.accessToken = data['access_token'];
            return rp(options);
          };
        })(this));
      }
    };

    Api.prototype.signedCallParams = function(method, specificParams) {
      var conf, params;
      if (specificParams == null) {
        specificParams = {};
      }
      conf = this.config();
      params = _.clone(specificParams);
      if (conf['apiVersion'] != null) {
        params['v'] = conf['apiVersion'];
      }
      if (this.accessToken != null) {
        params['access_token'] = this.accessToken;
      }
      if (method.split('.')[0] === 'secure') {
        params['client_secret'] = conf['appSecret'];
      }
      return params;
    };

    Api.prototype.canvasPageUrl = function(protocol) {
      return Api.canvasPageUrl(protocol);
    };

    Api.prototype.callbackUrl = function(protocol) {
      return Api.callbackUrl(protocol);
    };

    Api.prototype.iframeRedirectHtmlCode = function(targetUrl, customCode) {
      return Api.iframeRedirectHtmlCode(targetUrl, customCode);
    };

    return Api;

  })();

  module.exports = Api;

}).call(this);
