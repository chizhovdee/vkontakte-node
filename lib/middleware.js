// Generated by CoffeeScript 1.10.0
(function() {
  var Api, Encryptor, Middleware, User, _, config;

  _ = require('lodash');

  Encryptor = require('simple-encryptor');

  config = require('./config');

  User = require('./user');

  Api = require('./api');

  Middleware = (function() {
    Middleware.VK_PARAMS_NAMES = ['api_url', 'api_id', 'user_id', 'sid', 'secret', 'group_id', 'viewer_id', 'viewer_type', 'is_app_user', 'is_secure', 'auth_key', 'language', 'parent_language', 'api_result', 'api_settings', 'access_token', 'hash', 'lc_name', 'ad_info', 'ads_app_id'];

    function Middleware(request, response) {
      this.request = request;
      this.response = response;
      this.config = _.clone(config["default"]());
      this.params = {};
      if (!_.isEmpty(this.request.query)) {
        _.assignIn(this.params, this.request.query);
      }
      if (!_.isEmpty(this.request.params)) {
        _.assignIn(this.params, this.request.params);
      }
      if (!_.isEmpty(this.request.body)) {
        _.assignIn(this.params, this.request.body);
      }
    }

    Middleware.prototype.setUp = function() {
      this.request['SIGNED-PARAMS'] = this.request.get('SIGNED-PARAMS') || this.params['signed_params'];
      return this.request.vkontakte = {
        currentUser: this.fetchVkUser(),
        isVkCanvas: this.isVkCanvas(),
        apiClient: new Api(),
        vkSignedParams: this.vkSignedParams()
      };
    };

    Middleware.prototype.vkParams = function() {
      return _.pick(this.params, Middleware.VK_PARAMS_NAMES);
    };

    Middleware.prototype.paramsWithoutVkData = function() {
      return _.omit(this.params, Middleware.VK_PARAMS_NAMES);
    };

    Middleware.prototype.vkSignedParams = function() {
      var base, ref, vkParams;
      vkParams = this.vkParams();
      if (((ref = vkParams['access_token']) != null ? ref.length : void 0) > 0) {
        return this.encrypt(vkParams);
      } else {
        return this.request['SIGNED-PARAMS'] || this.params['signed_params'] || (typeof (base = this.request).flash === "function" ? base.flash('signed_params') : void 0);
      }
    };

    Middleware.prototype.encrypt = function(params) {
      var encryptor;
      encryptor = new Encryptor("secret_key_" + this.config['appId'] + "_" + this.config['appSecret']);
      return encryptor.encrypt(params);
    };

    Middleware.prototype.decrypt = function(encryptedParams) {
      var encryptor, result;
      encryptor = new Encryptor("secret_key_" + this.config['appId'] + "_" + this.config['appSecret']);
      result = encryptor.decrypt(encryptedParams);
      if (!result) {
        console.error(new Error("\nError while decoding vkontakte params: \"" + encryptedParams + "\""));
      }
      return result;
    };

    Middleware.prototype.fetchVkUser = function() {
      var paramsForUser, ref, vkParams;
      vkParams = this.vkParams();
      paramsForUser = (((ref = vkParams['access_token']) != null ? ref.length : void 0) > 0 ? vkParams : this.vkSignedParams());
      return User.fromVkParams(this.config, paramsForUser);
    };

    Middleware.prototype.isVkCanvas = function() {
      var base, ref;
      return ((ref = this.vkParams()['access_token']) != null ? ref.length : void 0) > 0 || this.request['SIGNED-PARAMS'] || ((typeof (base = this.request).flash === "function" ? base.flash('signed_params') : void 0) != null);
    };

    return Middleware;

  })();

  module.exports = function(req, res, next) {
    new Middleware(req, res).setUp();
    return next();
  };

}).call(this);
